'use strict';

(function () {

	'use strict';

	angular.module('ListaTelefonica', ['ngRoute', 'ngSanitize', 'ngComponents']);

	if ('serviceWorker' in navigator) {
		navigator.serviceWorker.register('./service-worker.js').then(function () {
			console.log('[ServiceWorker] Registered');
		});
	}
})();
"use strict";
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$httpProvider', httpConfig]);

	function httpConfig($httpProvider) {
		$httpProvider.defaults.cache = true;
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$httpProvider', interceptorConfig]);

	function interceptorConfig($httpProvider) {
		//console.log($httpProvider);
		//$httpProvider.interceptors.push("timeStampInterceptor");
		//$httpProvider.interceptors.push("authInterceptor");
		$httpProvider.interceptors.push("historyInterceptor");
		$httpProvider.interceptors.push("errorInterceptor");
		$httpProvider.interceptors.push("loadingInterceptor");
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").config(['$routeProvider', 'config', routeConfig]);

	function routeConfig($routeProvider, config) {

		$routeProvider.when("/:dirName*", {
			templateUrl: function templateUrl(urlattr) {
				console.log(urlattr.dirName.trim().toLowerCase());
				return urlattr.dirName.trim().toLowerCase() == 'auth/login' ? '/shared/security/' + urlattr.dirName + '.html' : '/modules/' + urlattr.dirName + '.html';
			}
		}).otherwise({
			redirectTo: '/veganHair/veganHair'
		});
	}
})();
"use strict";

(function () {

	'use strict';

	// angular.module("ListaTelefonica").value("config", {
	// 	baseJsonUrl: "http://192.168.15.2:3000",
	// 	baseHtmlUrl: "http://192.168.15.2/angulartest"
	// });

	// Constants are similiars with values, but could be inject in Providers.

	angular.module("ListaTelefonica").constant("config", {
		appName: 'VeganHair',
		appInitials: 'VH',
		appHome: window.location.origin,
		appModules: [],
		template: { templateName: 'template-01', showHeader: true, showFooter: true },
		templates: [{ templateName: 'template-01', showHeader: true, showFooter: true }, { templateName: 'template-02', showHeader: true, showFooter: true }, { templateName: 'template-03', showHeader: true, showFooter: true }],
		defaultRoute: '/veganHair/vegaHair',
		previousRoute: '',
		version: '1.0',
		owner: 'Tiago Carmo Santos',
		year: '2018',
		site: 'https://br.linkedin.com/in/tiagocarmosantos',
		apiUrl: location.hostname.toLowerCase() == 'localhost' ? 'http://localhost:3003/api' : 'https://microservice-sample.herokuapp.com/api',
		oapiUrl: location.hostname.toLowerCase() == 'localhost' ? 'http://localhost:3003/oapi' : 'https://microservice-sample.herokuapp.com/oapi',
		userKey: '_lista_telefonica_app_user',
		user: { ID: null, Name: null, ImageURL: null, Email: null, idToken: null, Logado: false, Anonymous: false, onSignIn: function onSignIn() {}, onSignOut: function onSignOut() {} }
	}).run(['$rootScope', 'config', function ($rootScope, config) {

		fetch(window.location.origin + "/modulesConfig.json").then(function (response) {
			return response.json();
		}).then(function (data) {
			config.appModules = data;
		});

		$rootScope.config = config;
	}]);
})();
'use strict';

(function () {

	'use strict';

	// This interceptor it is used to by pass on browser's cache.

	angular.module("ListaTelefonica").factory('authInterceptor', ['$rootScope', '$location', authInterceptor]);

	function authInterceptor($rootScope, $location) {
		return {
			request: function request(config) {
				if (config.method.toUpperCase() == 'GET' && config.url.slice(0, 8) == "/modules") {
					$rootScope.config.user.Anonymous = false;
					if (location.hash.indexOf('?') > -1) {
						$rootScope.config.user.Anonymous = location.hash.slice(location.hash.indexOf('?') + 1).split('&').map(function (item) {
							return { key: item.split('=')[0], value: item.split('=')[1] };
						}).filter(function (item) {
							return item.key.toLowerCase() == 'name' && item.value.toLowerCase() == 'anonymous';
						}).length > 0;
					}

					if ($rootScope.config.user.Logado == false && $rootScope.config.user.Anonymous == false) {
						$location.path("/auth/login");
					}
				}
				return config;
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").factory('errorInterceptor', ['$q', '$location', errorInterceptor]);

	function errorInterceptor($q, $location) {
		return {
			responseError: function responseError(rejection) {
				if (rejection.status == 404) {
					$location.path("/error");
				}

				if (rejection.status <= 0) {

					if (rejection.status == -1) {
						//console.log("Rejection Status: " + rejection.status);
						//console.log("Rejection URL: " + rejection.config.url);
						//console.log("Caches: " + caches);
						var deferred = $q.defer();
						caches.match(rejection.config.url).then(function (response) {
							//console.log("Cache Response: " + response);
							if (response) {
								response.json().then(function (json) {
									rejection.data = json;
									rejection.status = 200;
									deferred.resolve(rejection);
									//console.log("Resolve promise with ", rejection);
								});
								//console.log("deferred Reject: " + false);  
							} else {
								//console.log("deferred Reject: " + true);
								return deferred.reject(rejection);
							}
						});
						return deferred.promise;
					}
				}
				return $q.reject(rejection);
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	// This interceptor it is used to by pass on browser's cache.

	angular.module("ListaTelefonica").factory('historyInterceptor', ['$rootScope', '$window', '$location', historyInterceptor]);

	function historyInterceptor($rootScope, $window, $location) {
		return {
			request: function request(config) {

				if (config.method.toUpperCase() == 'GET' && config.url.slice(0, 8) == "/modules") {
					$rootScope.config.previousRoute = location.hash.replace('#!', '');
				}

				return config;
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	angular.module("ListaTelefonica").factory('loadingInterceptor', ['$q', '$rootScope', '$timeout', loadingInterceptor]);

	function loadingInterceptor($q, $rootScope, $timeout) {
		return {
			request: function request(config) {
				$rootScope.loading = true;
				return config;
			},
			requestError: function requestError(rejection) {
				$rootScope.loading = false;
				return $q.reject(rejection);
			},
			response: function response(_response) {
				$timeout(function () {
					$rootScope.loading = false;
				}, 500);
				return _response;
			},
			responseError: function responseError(rejection) {
				$rootScope.loading = false;
				return $q.reject(rejection);
			}
		};
	}
})();
'use strict';

(function () {

	'use strict';

	// This interceptor it is used to by pass on browser's cache.

	angular.module("ListaTelefonica").factory('timeStampInterceptor', [timeStampInterceptor]);

	function timeStampInterceptor() {
		return {
			request: function request(config) {
				var url = config.url;
				if (url.indexOf('view') > -1) return config;
				var timeStamp = new Date().getTime();
				config.url = url + "?timestamp=" + timeStamp;
				console.log(config.url);
				return config;
			}
		};
	}
})();
"use strict";

(function () {

    'use strict';

    angular.module("ListaTelefonica").controller("loginController", ['$rootScope', '$scope', '$window', loginController]);

    function loginController($rootScope, $scope, $window) {

        var vm = this;

        function onSignIn(googleUser) {
            console.log('User signed in.');

            var profile = googleUser.getBasicProfile();
            vm.User.ID = profile.getId();
            vm.User.Name = profile.getName();
            vm.User.ImageURL = profile.getImageUrl();
            vm.User.Email = profile.getEmail();
            vm.User.Logado = true;
            vm.User.idToken = googleUser.getAuthResponse().id_token;

            var redirectRoute = !!$rootScope.config.previousRoute ? $rootScope.config.previousRoute : $rootScope.config.defaultRoute;
            $window.location.assign($window.location.origin + "/#!" + redirectRoute);
        }

        function onSignOut() {
            gapi.auth2.getAuthInstance().signOut().then(function () {
                console.log('User signed out.');
                initUser();
                $window.location.reload();
            });
        }

        function initUser() {
            return $rootScope.config.user = vm.User = {
                ID: null,
                Name: null,
                ImageURL: null,
                Email: null,
                Logado: false,
                Anonymous: false,
                onSignIn: onSignIn,
                onSignOut: onSignOut
            };
        }

        (function initController() {
            console.log('Login');
            $rootScope.config.template.showFooter = false;
            $rootScope.config.template.showHeader = false;

            document.User = initUser();

            gapi.signin2.render('googleBtn', { onsuccess: vm.User.onSignIn, onfailure: vm.User.onSignOut });
        })();

        // Clean up stuff
        $scope.$on('$destroy', function () {
            //  TODO SOMETHING
            $rootScope.config.template.showFooter = true;
            $rootScope.config.template.showHeader = true;
        });

        // Here your view content is fully loaded !!
        $scope.$on('$viewContentLoaded', function () {
            //  TODO SOMETHING
        });
    }
})();